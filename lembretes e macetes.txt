	>Ctrl + K + D  (Identação automática)
	>CW <tab><tab> (Console.Write())
	>CultureInfo.InvariantCulture (troca "," por ".")
	>F9 (breakpoint) >F5 (debbug) >F10 (passo)
	
		
		float n4 = 321.325F
		Console.WriteLine("Float " + n4.ToString("F2", CultureInfo.Invaria			ntCulture));
	
	>variável.Split(' ');  (vai recortar texto nos espaços em branco ' ')
		
		variável = Console.ReadLine()
		string[] vetor = variável.Split(' ')
				ou
		string[] vet = Console.ReadLine().Split(' ');
	
	>tipo.Parse() (Converte tipos para o ReadLine)
		
		int n1 = int.Parse(Console.ReadLine());
		double n2 = double.Parse(Console.ReadLine(), 						CultureInfo.InvariantCulture);
	
	>Repetição for
		sintaxe: for (início ; condição ; incremento){}
				dá pra criar uma variável em "início"

	>Classe
		public double A;  <-- 
		<nomedaClasse> x,y;
		x = new <nomedaClasse>;
		y = new <nomedaClasse>;
		
		x.A = double;
		y.A = double;

	>Função
		Classe{
			public static double Nome(){}   
		}	//static caso não precise de objeto para instanciar
		


	>Construtor
		public Classe(string nome, double preco, int quantidade)
        	{
            		Nome = nome;
            		Preco = preco;
            		Quantidade = quantidade;
        	}

	>Vetor (ref)
		tipo[] nomeVet = new tipo[n]	
		ex:
			int[] vet = new int[10]

	>Matriz (ref)
		tipo[,] nomeMatriz = new tipo[n,m]
		ex:
			int[] mat = new int[3,2]

	>Função que recebe quantidade variada de dados
		public static int Soma(params int[] numbers){
			int soma = 0
			for (int i = 0; i < numbers.Lenght; i++) {
				sum += numbers[i]
			}
		}
		>Params
			Chamando a função:
			Sem params: int s1 = Soma(new int[] {2,3});
			Com params: int s1 = Soma(2,3)

	>Boxing (Object)
		Object obj = QualquerValor
		É do tipo referência, logo instancia no heap
		
		>Unboxing
		Object obj = 10;
		int y = (int) obj; // y recebe 10 no stack

	>Foreach
		foreach (int obj in vetor){}

	>Listas
		List<string> nomeLista; // Cria variável tipo List<string>
		nomeLista = new List<string>(); // Cria(instancia) uma lista vazia
		~Ver cap 6
		
	
		
	